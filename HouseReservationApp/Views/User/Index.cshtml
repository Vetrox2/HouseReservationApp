@using HouseReservationApp.Models.DB.Entities
@model PagedResult<User>

@{
    var columns = new[]
    {
    new { Name = "Id", Display = "ID" },
    new { Name = "FirstName", Display = "First Name" },
    new { Name = "LastName", Display = "Last Name" },
    new { Name = "Email", Display = "Email" },
    new { Name = "Phone", Display = "Phone Number" },
    new { Name = "BankAccount", Display = "Bank Account" },
    new { Name = "CreatedAt", Display = "Created at" }
    };
}

<h1 class="mb-5">User List</h1>
<a asp-action="Create" class="btn btn-success mb-3">Add User</a>

<form asp-action="Index" method="get" class="mb-4">
    <div class="row">
        <div class="col-md-4">
            <label for="firstName">First Name</label>
            <input type="text" name="firstName" value="@ViewData["FirstName"]" class="form-control" />
        </div>
        <div class="col-md-4">
            <label for="lastName">Last Name</label>
            <input type="text" name="lastName" value="@ViewData["LastName"]" class="form-control" />
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
    <input type="hidden" name="page" value="1" />
    <input type="hidden" name="pageSize" value="@Model.PageSize" />
    <input type="hidden" name="sortBy" value="@ViewData["SortBy"]" />
    <input type="hidden" name="sortDirection" value="@ViewData["SortDirection"]" />
</form>

<table class="table table-hover table-striped">
    <caption>List of users</caption>

    <thead class="table-primary">
        <tr>
            @foreach (var column in columns)
            {
                <th scope="col">
                    <a href="@Url.Action("Index", new {
                    firstName = ViewData["FirstName"],
                    lastName = ViewData["LastName"],
                    page = 1,
                    pageSize = Model.PageSize,
                    sortBy = column.Name,
                    sortDirection = ViewData["SortBy"]?.ToString() == column.Name && ViewData["SortDirection"]?.ToString() == "asc" ? "desc" : "asc"
                })">
                        @column.Display
                        @if (ViewData["SortBy"]?.ToString() == column.Name)
                        {
                            <span>@(ViewData["SortDirection"]?.ToString() == "asc" ? "↑" : "↓")</span>
                        }
                    </a>
                </th>
            }
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model.Items)
        {
            <tr>
                <td class="align-middle">@user.Id</td>
                <td class="align-middle">@user.FirstName</td>
                <td class="align-middle">@user.LastName</td>
                <td class="align-middle">@user.Email</td>
                <td class="align-middle">@user.Phone</td>
                <td class="align-middle">@user.BankAccount</td>
                <td class="align-middle">@user.CreatedAt.ToString("dd/MM/yyyy")</td>
                <td class="pe-0 align-middle d-flex gap-1">
                    <a asp-action="Edit" asp-route-id="@user.Id" class="btn btn-primary"><i class="bi bi-pencil-square"></i></a>
                    <form asp-action="Delete" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@user.Id" />
                        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete @user.FirstName @user.LastName?');">
                            <i class="bi bi-trash"></i>
                        </button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex flex-column align-items-center mt-4">
    <p>Showing @(Model.Items.Count()) of @Model.TotalCount users (Page @Model.CurrentPage of @Model.TotalPages)</p>

    @{
        var baseParams = new Dictionary<string, string?>
    {
    { "pageSize", Model.PageSize.ToString() },
    { "firstName", ViewData["FirstName"]?.ToString() },
    { "lastName", ViewData["LastName"]?.ToString() },
    { "sortBy", ViewData["SortBy"]?.ToString() },
    { "sortDirection", ViewData["SortDirection"]?.ToString() }
    };
    }

    <nav aria-label="User pagination">
        <ul class="pagination justify-content-center">
            <!-- Previous Button -->
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                @{
                    var prevParams = new Dictionary<string, string>(baseParams) { { "page", (Model.CurrentPage - 1).ToString() } };
                }
                <a class="page-link"
                   href="@(Model.CurrentPage > 1 ? Url.Action("Index", prevParams) : "#")"
                   aria-label="Previous">
                    <span aria-hidden="true">«</span>
                </a>
            </li>

            <!-- Page Numbers -->
            @{
                int startPage = Math.Max(1, Model.CurrentPage - 2);
                int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);

                if (startPage > 1)
                {
                    var firstPageParams = new Dictionary<string, string>(baseParams) { { "page", "1" } };
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", firstPageParams)">1</a>
                    </li>
                    if (startPage > 2)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                }

                for (int i = startPage; i <= endPage; i++)
                {
                    var pageParams = new Dictionary<string, string>(baseParams) { { "page", i.ToString() } };
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", pageParams)">@i</a>
                    </li>
                }

                if (endPage < Model.TotalPages)
                {
                    if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                    var lastPageParams = new Dictionary<string, string>(baseParams) { { "page", Model.TotalPages.ToString() } };
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", lastPageParams)">@Model.TotalPages</a>
                    </li>
                }
            }

            <!-- Next Button -->
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                @{
                    var nextParams = new Dictionary<string, string>(baseParams) { { "page", (Model.CurrentPage + 1).ToString() } };
                }
                <a class="page-link"
                   href="@(Model.CurrentPage < Model.TotalPages ? Url.Action("Index", nextParams) : "#")"
                   aria-label="Next">
                    <span aria-hidden="true">»</span>
                </a>
            </li>
        </ul>
    </nav>
</div>