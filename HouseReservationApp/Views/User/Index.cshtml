@using HouseReservation.Contracts.Models
@using HouseReservation.Contracts.Models.ViewModels
@using HouseReservation.Core.Utilities
@using Microsoft.AspNetCore.Identity
@model UserIndexViewModel

@{
    var showAddUserButton = User.IsInRole("Admin") || User.IsInRole("Manager");
    var showEditUserButton = User.IsInRole("Admin") || User.IsInRole("Manager");
    var showDeleteUserButton = User.IsInRole("Admin");


    var baseParams = new UserIndexParams(
        FirstName: Model.FirstNameFilter,
        LastName: Model.LastNameFilter,
        Page: Model.PagedResult.CurrentPage,
        PageSize: Model.PagedResult.PageSize,
        SortBy: Model.SortBy,
        SortDirection: Model.SortDirection
    );

    var columns = new[]
    {
    new { Name = "Id", Display = "ID" },
    new { Name = "FirstName", Display = "First Name" },
    new { Name = "LastName", Display = "Last Name" },
    new { Name = "Email", Display = "Email" },
    new { Name = "Phone", Display = "Phone Number" },
    new { Name = "BankAccount", Display = "Bank Account" },
    new { Name = "CreatedAt", Display = "Created at" }
    };
}

<h1 class="mb-5">User List</h1>
@if (showAddUserButton)
{
    <a asp-action="Create" class="btn btn-success mb-3">Add User</a>
}

<form asp-action="Index" method="get" class="mb-4">
    <div class="row">
        <div class="col-md-4">
            <label for="firstName">First Name</label>
            <input type="text" name="FirstName" id="firstName" value="@Model.FirstNameFilter" class="form-control" />
        </div>
        <div class="col-md-4">
            <label for="lastName">Last Name</label>
            <input type="text" name="LastName" id="lastName" value="@Model.LastNameFilter" class="form-control" />
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
    <input type="hidden" name="Page" value="1" />
    <input type="hidden" name="PageSize" value="@Model.PagedResult.PageSize" />
    <input type="hidden" name="SortBy" value="@Model.SortBy" />
    <input type="hidden" name="SortDirection" value="@Model.SortDirection" />
</form>

<table class="table table-hover table-striped">
    <caption>List of users</caption>

    <thead class="table-primary">
        <tr>
            @foreach (var column in columns)
            {
                var sortParams = baseParams with 
                {
                    Page = 1,
                    SortBy = column.Name,
                    SortDirection = Model.SortBy == column.Name && Model.SortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending
                };
                
                <th scope="col">
                    <a href="@Url.Action("Index", sortParams)">
                        @column.Display
                        @if (Model.SortBy == column.Name)
                        {
                            <span>@(Model.SortDirectionIcon)</span>
                        }
                    </a>
                </th>
            }
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model.PagedResult.Items)
        {
            <tr>
                <td class="align-middle">@user.Id</td>
                <td class="align-middle">@user.FirstName</td>
                <td class="align-middle">@user.LastName</td>
                <td class="align-middle">@user.Email</td>
                <td class="align-middle">@user.Phone</td>
                <td class="align-middle">@user.BankAccount</td>
                <td class="align-middle">@user.CreatedAt.ToString("dd/MM/yyyy")</td>
                <td class="pe-0 align-middle d-flex gap-1">
					@if (showEditUserButton)
					{
                        <a asp-action="Edit" asp-route-id="@user.Id" class="btn btn-primary"><i class="bi bi-pencil-square"></i></a>
					}
					@if (showDeleteUserButton)
					{
                        <form asp-action="Delete" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@user.Id" />
                            <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete @user.FirstName @user.LastName?');">
                                <i class="bi bi-trash"></i>
                            </button>
                        </form>
					}
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex flex-column align-items-center mt-4">
    <p>Showing @(Model.PagedResult.Items.Count()) of @Model.PagedResult.TotalCount users (Page @Model.PagedResult.CurrentPage of @Model.PagedResult.TotalPages)</p>

    <nav aria-label="User pagination">
        <ul class="pagination justify-content-center">
            <!-- Previous Button -->
            <li class="page-item @(Model.PagedResult.CurrentPage == 1 ? "disabled" : "")">
                @{
                    var prevParams = baseParams with { Page = Model.PagedResult.CurrentPage - 1 };
                }
                <a class="page-link"
                   href="@(Model.PagedResult.CurrentPage > 1 ? Url.Action("Index", prevParams) : "#")"
                   aria-label="Previous">
                    <span aria-hidden="true">«</span>
                </a>
            </li>

            <!-- Page Numbers -->
            @{
                int startPage = Math.Max(1, Model.PagedResult.CurrentPage - 2);
                int endPage = Math.Min(Model.PagedResult.TotalPages, Model.PagedResult.CurrentPage + 2);

                if (startPage > 1)
                {
                    var firstPageParams = baseParams with { Page = 1 };
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", firstPageParams)">1</a>
                    </li>
                    if (startPage > 2)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                }

                for (int i = startPage; i <= endPage; i++)
                {
                    var pageParams = baseParams with { Page = i };
                    <li class="page-item @(i == Model.PagedResult.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", pageParams)">@i</a>
                    </li>
                }

                if (endPage < Model.PagedResult.TotalPages)
                {
                    if (endPage < Model.PagedResult.TotalPages - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }

                    var lastPageParams = baseParams with { Page = Model.PagedResult.TotalPages };
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", lastPageParams)">@Model.PagedResult.TotalPages</a>
                    </li>
                }
            }

            <!-- Next Button -->
            <li class="page-item @(Model.PagedResult.CurrentPage == Model.PagedResult.TotalPages ? "disabled" : "")">
                @{
                    var nextParams = baseParams with { Page = Model.PagedResult.CurrentPage + 1 };
                }
                <a class="page-link"
                   href="@(Model.PagedResult.CurrentPage < Model.PagedResult.TotalPages ? Url.Action("Index", nextParams) : "#")"
                   aria-label="Next">
                    <span aria-hidden="true">»</span>
                </a>
            </li>
        </ul>
    </nav>
</div>